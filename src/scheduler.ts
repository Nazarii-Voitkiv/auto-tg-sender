import { sendMessages } from './telegramService';

class MessageScheduler {
  private timer: NodeJS.Timeout | null = null;
  private minInterval: number = 30; // –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 30 —Ö–≤–∏–ª–∏–Ω
  private maxInterval: number = 60; // –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 60 —Ö–≤–∏–ª–∏–Ω
  private running: boolean = false;

  constructor() {
    console.log('üìÖ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞...');
    this.start(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø—É—Å–∫–∞—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
  }

  private getRandomInterval(): number {
    return Math.floor(Math.random() * (this.maxInterval - this.minInterval + 1) + this.minInterval) * 60000;
  }

  private async scheduleNext() {
    if (!this.running) return;

    try {
      await sendMessages();
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:', error);
    }

    const nextInterval = this.getRandomInterval();
    console.log(`‚è∞ –ù–∞—Å—Ç—É–ø–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ —á–µ—Ä–µ–∑ ${nextInterval / 60000} —Ö–≤–∏–ª–∏–Ω`);
    
    this.timer = setTimeout(() => this.scheduleNext(), nextInterval);
  }

  public start() {
    if (!this.running) {
      this.running = true;
      this.scheduleNext();
      console.log('‚ñ∂Ô∏è –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ');
    }
  }

  public pause() {
    if (this.timer) {
      clearTimeout(this.timer);
      this.timer = null;
    }
    this.running = false;
    console.log('‚è∏Ô∏è –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ');
  }

  public resume() {
    if (!this.running) {
      this.running = true;
      this.scheduleNext();
      console.log('‚ñ∂Ô∏è –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ');
    }
  }

  public setInterval(min: number, max: number) {
    if (min >= max) {
      throw new Error('–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º–∞—î –±—É—Ç–∏ –º–µ–Ω—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ');
    }
    this.minInterval = min;
    this.maxInterval = max;
    console.log(`‚öôÔ∏è –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª: ${min}-${max} —Ö–≤–∏–ª–∏–Ω`);
  }

  public isRunning(): boolean {
    return this.running;
  }
}

export default new MessageScheduler();